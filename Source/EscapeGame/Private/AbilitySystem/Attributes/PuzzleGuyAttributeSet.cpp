// Fill out your copyright notice in the Description page of Project Settings.


#include "AbilitySystem/Attributes/PuzzleGuyAttributeSet.h"
#include "GameplayEffectExtension.h"
#include "Net/UnrealNetwork.h"
#include "Characters/PlayerCharacter.h"

UPuzzleGuyAttributeSet::UPuzzleGuyAttributeSet()
{

}

void UPuzzleGuyAttributeSet::GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const
{
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);

	DOREPLIFETIME(UPuzzleGuyAttributeSet, Health);
	DOREPLIFETIME(UPuzzleGuyAttributeSet, MaxHeath);
}

void UPuzzleGuyAttributeSet::PreAttributeChange(const FGameplayAttribute& Attribute, float& NewValue)
{
	Super::PreAttributeChange(Attribute, NewValue);

	// The GetMaxHeathAttribute() function is generated by attribute macro
	if (Attribute == GetMaxHeathAttribute())
	{
		AdjustAttributeForMaxChange(Health, MaxHeath, NewValue, GetHealthAttribute());
	}

}


void UPuzzleGuyAttributeSet::PostGameplayEffectExecute(const FGameplayEffectModCallbackData& Data)
{
	Super::PostGameplayEffectExecute(Data);

	FGameplayEffectContextHandle Context = Data.EffectSpec.GetContext();
	UAbilitySystemComponent* Source = Context.GetOriginalInstigatorAbilitySystemComponent();
	const FGameplayTagContainer& SourceTags = *Data.EffectSpec.CapturedSourceTags.GetAggregatedTags();

	float DeltaValue = 0.f;

	if (Data.EvaluatedData.ModifierOp == EGameplayModOp::Type::Additive)
	{
		// If this is a Damage, the delta will be negative
		DeltaValue = Data.EvaluatedData.Magnitude;
	}

	APlayerCharacter* TargetCharacter = nullptr;

	if (Data.Target.AbilityActorInfo.IsValid() && Data.Target.AbilityActorInfo->AvatarActor.IsValid())
	{
		AActor* TargetActor = Data.Target.AbilityActorInfo->AvatarActor.Get();
		TargetCharacter = Cast<APlayerCharacter>(TargetActor);
	}

	// The GetHeathAttribute() function is generated by attributes macro
	if (Data.EvaluatedData.Attribute == GetHealthAttribute())
	{
		SetHealth(FMath::Clamp(GetHealth(), 0.f, GetMaxHeath()));

		if (TargetCharacter)
		{
			TargetCharacter->HandleHealthChanged(DeltaValue, SourceTags);
		}

	}
}

void UPuzzleGuyAttributeSet::AdjustAttributeForMaxChange(const FGameplayAttributeData& AffectedAttribute,
	const FGameplayAttributeData& MaxAttribute, float NewMaxValue, const FGameplayAttribute& AffectedAttributeProperty) const
{
	UAbilitySystemComponent* AbilityComp = GetOwningAbilitySystemComponent();
	const float CurrentMaxValue = MaxAttribute.GetCurrentValue();

	if (AbilityComp && !FMath::IsNearlyZero(CurrentMaxValue, NewMaxValue))
	{
		const float CurrentValue = AffectedAttribute.GetCurrentValue();
		float NewDelta = 0.f;

		if (CurrentMaxValue > 0.f)
		{
			NewDelta = (CurrentValue * NewMaxValue / CurrentMaxValue) - CurrentValue;
		}
		else
		{
			NewDelta = NewMaxValue;
		}

		AbilityComp->ApplyModToAttributeUnsafe(AffectedAttributeProperty, EGameplayModOp::Additive, NewDelta);
	}
}

void UPuzzleGuyAttributeSet::OnRep_Health(const FGameplayAttributeData& OldValue)
{
	GAMEPLAYATTRIBUTE_REPNOTIFY(UPuzzleGuyAttributeSet, Health, OldValue);
}

void UPuzzleGuyAttributeSet::OnRep_MaxHeath(const FGameplayAttributeData& OldValue)
{
	GAMEPLAYATTRIBUTE_REPNOTIFY(UPuzzleGuyAttributeSet, MaxHeath, OldValue);
}
